name: Update Supabase Project Index

on:
  push:
    paths:
      - 'u/**/mosaicra.config.yaml'

jobs:
  update-project-index:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.x'

      - name: Install dependencies
        run: pip install requests pyyaml

      - name: Parse updated config and update Supabase
        run: |
          cat << 'EOF' > update_index.py
          import os, yaml, requests, glob
          from pathlib import Path
          from datetime import datetime
          import json

          SUPABASE_URL = os.environ['SUPABASE_URL']
          SUPABASE_KEY = os.environ['SUPABASE_SERVICE_ROLE']

          def iso_now():
              return datetime.utcnow().isoformat() + 'Z'

          headers = {
              "apikey": SUPABASE_KEY,
              "Authorization": f"Bearer {SUPABASE_KEY}",
              "Content-Type": "application/json"
          }

          config_paths = glob.glob("u/*/*/mosaicra.config.yaml")

          for path in config_paths:
              with open(path) as f:
                  config = yaml.safe_load(f)

              parts = Path(path).parts
              username = parts[1]
              project_name = parts[2]

              project = config.get("Project", {})
              metadata = config.get("Metadata", {})

              payload = {
                  "project_id": project.get("Id"),
                  "name": project.get("Name", project_name),
                  "slug": project.get("Slug", project_name.lower().replace(' ', '-')),
                  "description": project.get("Description"),
                  "category": project.get("Category"),
                  "interface": project.get("Interface", "web"),
                  "visibility": project.get("Visibility", "public"),
                  "version": metadata.get("Version"),
                  "tags": project.get("Tags", []),
                  "owner_username": username,
                  "updated_at": iso_now()
              }

              url = f"{SUPABASE_URL}/rest/v1/project_index?project_id=eq.{payload['project_id']}"

              res = requests.get(url, headers=headers)
              if res.ok and res.json():
                  requests.patch(url, headers=headers, data=json.dumps(payload))
              else:
                  payload["created_at"] = iso_now()
                  requests.post(f"{SUPABASE_URL}/rest/v1/project_index", headers=headers, data=json.dumps(payload))
          EOF
          python update_index.py
        env:
          SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
          SUPABASE_SERVICE_ROLE: ${{ secrets.SUPABASE_SERVICE_ROLE }}
