name: Update Supabase Project Index

on:
  push:
    paths:
      - 'u/**/mosaicra.config.yaml'

jobs:
  update-project-index:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.x'

      - name: Install dependencies
        run: pip install requests pyyaml

      - name: Check commit and extract file if applicable
        id: check_commit
        run: |
          COMMIT_MSG=$(git log -1 --pretty=%B)
          echo "Commit message: $COMMIT_MSG"
          if echo "$COMMIT_MSG" | grep -q "Create Project Metadata"; then
            FILE=$(git diff-tree --no-commit-id --name-only -r ${{ github.sha }} | grep 'u/.*/.*/mosaicra.config.yaml$' || true)
            echo "Detected file: $FILE"
            echo "file_path=$FILE" >> $GITHUB_OUTPUT
          else
            echo "No matching commit message. Skipping."
            echo "file_path=" >> $GITHUB_OUTPUT
          fi

      - name: Parse config and update Supabase
        if: steps.check_commit.outputs.file_path != ''
        run: |
          FILE=${{ steps.check_commit.outputs.file_path }}
          cat << EOF > update_index.py
          import os, yaml, requests
          from datetime import datetime, timezone
          from pathlib import Path

          path = "${FILE}"

          SUPABASE_URL = os.environ["SUPABASE_URL"]
          SUPABASE_KEY = os.environ["SUPABASE_SERVICE_ROLE"]

          headers = {
              "apikey": SUPABASE_KEY,
              "Authorization": f"Bearer {SUPABASE_KEY}",
              "Content-Type": "application/json"
          }

          def iso_now():
              return datetime.now(timezone.utc).isoformat()

          try:
              with open(path) as f:
                  config = yaml.safe_load(f)
          except Exception as e:
              print(f"Error reading {path}: {e}")
              exit(1)

          parts = Path(path).parts
          username, project_name = parts[1], parts[2]

          project = config.get("Project", {})
          metadata = config.get("Metadata", {})

          payload = {
              "project_id": project.get("Id"),
              "name": project.get("Name", project_name),
              "slug": project.get("Slug", project_name.lower().replace(' ', '-')),
              "description": project.get("Description"),
              "category": project.get("Category"),
              "interface": project.get("Interface", "web"),
              "visibility": project.get("Visibility", "public"),
              "version": metadata.get("Version"),
              "tags": project.get("Tags", []),
              "owner_username": username,
              "updated_at": iso_now(),
              "remix_of": project.get("RemixOf"),
              "variant_of": project.get("VariantOf")
          }

          if not payload["project_id"]:
              print(f"Skipping {path}: missing project_id")
              exit(0)

          url = f"{SUPABASE_URL}/rest/v1/project_index?project_id=eq.{payload['project_id']}"

          res = requests.get(url, headers=headers)
          if res.ok and res.json():
              requests.patch(url, headers=headers, json=payload)
          else:
              payload["created_at"] = iso_now()
              requests.post(f"{SUPABASE_URL}/rest/v1/project_index", headers=headers, json=payload)
          EOF
          python update_index.py
        env:
          SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
          SUPABASE_SERVICE_ROLE: ${{ secrets.SUPABASE_SERVICE_ROLE }}
