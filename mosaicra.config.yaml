Project:
  Name: Aurora Landing
  Description: A sleek and responsive landing page template designed with modern
    layout principles and animated interactions.
  Visibility: public
  Category: UI Component
  Subcategory: Landing Page
  Tags:
    - landing
    - responsive
    - animated
    - hero
    - modern
    - ui
  View:
    Mode: dynamic
  Owner:
    Username: herogautam
    ProfileURL: https://github.com/herogautam
  Metadata:
    CreatedAt: 2025-07-08T02:45:00+05:30
    LastUpdated: 2025-07-08T02:45:00+05:30
    Version: 1.0.0
  Features:
    - ResponsiveLayout
    - AnimatedSections
    - ScrollAware
    - CleanTypography
  Dependencies:
    CSS:
      - tailwindcss
    JS:
      - vanilla
  Licensing:
    Type: MIT
    Link: https://opensource.org/licenses/MIT
  Community:
    AllowFork: true
    AllowComment: true
    AllowRemix: true
Owner:
  Username: unknown
  ProfileURL: "#"
Metadata:
  CreatedAt: 2025-07-09T17:48:37.779Z
  LastUpdated: 2025-07-09T17:48:46.508Z
  Version: 1.0.0
Features: []
Dependencies:
  CSS: []
  JS: []
Licensing:
  Type: MIT
  Link: "#"
Community:
  AllowFork: true
  AllowComment: true
  AllowRemix: true
